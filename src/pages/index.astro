---
import BaseLayout from "../layouts/BaseLayout.astro";
import HorizontalCard from "../components/HorizontalCard.astro";
import { Image } from "astro:assets";

/ Put your cards here (use the same props you already have)
const items = [
  {
    title: "üå± Youth Mental Health",
    img: "/post_img.webp",
    desc:
      "For youth mental health, I imagined an emotional check-in tool for schools, helping spot distress early and making support feel normal and approachable.",
    url: "https://gamma.app/docs/Youth-Mental-Health-in-Singapore-td94aa5y2k4zpkh",
    badge: "NEW",
  },
  {
    title: "üßì Ageing with Dignity",
    img: "/post_img.webp",
    desc:
      "For seniors and caregivers, I mapped simple concepts to make support routines less stressful ‚Äî a tap-in mood kiosk, or delivery rhythms that avoid burnout.",
    url: "https://gamma.app/docs/Scaling-Trusted-Sustainable-Care-kw1gywhu6wz95c1",
  },
  {
    title: "üîó Inclusive Digitalisation",
    img: "/post_img.webp",
    desc:
      "What it takes to move beyond pilots ‚Äî lasting digital partnerships where everyone‚Äôs voice is included from day one.",
    url: "https://gamma.app/docs/OneDigital-Ecosystem-qr0yxvbc3tfxxs",
  },
  {
    title: "‚ôø People of Determination",
    img: "/post_img.webp",
    desc:
      "Rolling out support step by step for people with disabilities, with a focus on daily realities instead of frameworks.",
    url: "https://gamma.app/docs/Sena-Lim-SGEnable-Idea-Deck-u0xwp2sz5357grt",
  },
  {
    title: "üè¶ Building Everyday Trust (CDC Vouchers)",
    img: "/post_img.webp",
    desc:
      "How thoughtful design can help hesitant users trust and adopt national vouchers ‚Äî not feel left behind.",
    url: "https://gamma.app/docs/Building-Everyday-Trust-in-CDC-Vouchers-pi98twd94vr72vs",
  },
];

---

<BaseLayout title="Sena Lim | Clarity Alchemist">
  <main class="-px-6">
<!--   <main class="max-w-4xl mx-auto px-4 py-16 space-y-16"> -->


<section class="relative min-h-screen bg-white overflow-hidden -mx-6 md:-mx-12 -my-6 md:-my-12 flex items-center">
  <!-- Big Yellow Shape (cropped circle) -->
  <div class="absolute top-0 left-0 w-[300px] h-[300px] md:w-[500px] md:h-[500px] bg-miloYellow rounded-full -translate-x-1/3 -translate-y-1/5 z-0">
            <Image class="mask mask-circle" format="jpg" width={300} height={300} src="/profile.jpg" alt="Profile image" />
</div>

  <!-- Hero Text -->
  <div class="relative z-10 text-left space-y-4 px-6 md:px-12 mt-18 md:mt-20">
    <h1 class="font-serif text-5xl sm:text-7xl md:text-9xl tracking-wide">
      Hi, I‚Äôm Sena<br/>
      The Clarity Alchemist.
    </h1>
<p class="text-base sm:text-base md:text-lg text-gray-700 max-w-md">
      I turn signals into <span class="text-miloYellow font-semibold">clear product direction, experiment my way</span> 
      to build systems that help people and strengthen communities.
    </p>

    <!-- Buttons -->
    <div class="mt-6 space-x-4">
      <a class="btn" href="https://www.linkedin.com/in/senalim/" target="_blank">
        Let's connect!
      </a>
      <a class="btn btn-outline" href="/projects">
        Explore My Work!
      </a>
    </div>
  </div>
</section>

   


    <!-- Featured Projects -->

<section class="px-4 md:px-8 py-10">
    <h1 class="text-3xl font-bold mb-6 text-center">Case Studies</h1>

    <!-- viewport -->
    <div class="relative">
      <!-- horizontal scroller with snap -->
      <div
        id="cs-track"
        class="flex gap-6 overflow-x-auto snap-x snap-mandatory scroll-smooth pb-4 [-ms-overflow-style:none] [scrollbar-width:none]"
        aria-label="Case studies carousel"
      >
        <!-- hide scrollbars -->
        <style is:inline>
          #cs-track::-webkit-scrollbar{display:none;}
        </style>

        {items.map((it, i) => (
          <div class="snap-center shrink-0 w-[90%] sm:w-[70%] md:w-[60%] lg:w-[700px]">
            <HorizontalCard {...it} />
          </div>
        ))}
      </div>

      <!-- controls -->
      <div class="mt-4 flex items-center justify-center gap-3">
        <button
          id="cs-prev"
          class="rounded-full border px-3 py-1 text-sm hover:bg-gray-50"
          aria-label="Previous case study"
        >
          ‚Äπ
        </button>
        <div id="cs-dots" class="flex gap-2"></div>
        <button
          id="cs-next"
          class="rounded-full border px-3 py-1 text-sm hover:bg-gray-50"
          aria-label="Next case study"
        >
          ‚Ä∫
        </button>
      </div>
    </div>
  </section>

  <script is:inline>
    // light controls: move the scroll container by one slide width
    const track = document.getElementById('cs-track');
    const prev = document.getElementById('cs-prev');
    const next = document.getElementById('cs-next');
    const slides = Array.from(track.children);
    const dotsWrap = document.getElementById('cs-dots');

    function currentIndex() {
      // Find the slide whose left edge is closest to the viewport left
      const { left } = track.getBoundingClientRect();
      let idx = 0, min = Infinity;
      slides.forEach((s, i) => {
        const d = Math.abs(s.getBoundingClientRect().left - left);
        if (d < min) { min = d; idx = i; }
      });
      return idx;
    }

    function goTo(i) {
      const clamped = Math.max(0, Math.min(slides.length - 1, i));
      slides[clamped].scrollIntoView({ behavior: 'smooth', inline: 'center', block: 'nearest' });
      syncDots(clamped);
    }

    function syncDots(i = currentIndex()) {
      dotsWrap.querySelectorAll('button').forEach((b, bi) => {
        b.setAttribute('aria-current', bi === i ? 'true' : 'false');
      });
    }

    // dots
    slides.forEach((_, i) => {
      const b = document.createElement('button');
      b.className = 'h-2 w-2 rounded-full bg-gray-300 aria-[current=true]:bg-black';
      b.setAttribute('aria-label', `Go to slide ${i+1}`);
      b.addEventListener('click', () => goTo(i));
      dotsWrap.appendChild(b);
    });
    syncDots(0);

    prev.addEventListener('click', () => goTo(currentIndex() - 1));
    next.addEventListener('click', () => goTo(currentIndex() + 1));

    // keep dots in sync on manual scroll/drag
    let raf;
    track.addEventListener('scroll', () => {
      cancelAnimationFrame(raf);
      raf = requestAnimationFrame(() => syncDots());
    }, { passive: true });
  </script>


  </main>
</BaseLayout>
