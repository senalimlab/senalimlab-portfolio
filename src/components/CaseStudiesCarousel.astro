---
import HorizontalCard from "./HorizontalCard.astro";
import type { CaseStudy } from "../content/caseStudies";

interface Props {
  title?: string;
  items: CaseStudy[];
}
const { title = "Case Studies", items } = Astro.props;
---
<section class="px-4 md:px-8 py-10">
  <h2 class="text-2xl md:text-3xl font-bold mb-6 text-center">{title}</h2>

  <div class="relative">
    <div
      id="cs-track"
      class="flex gap-6 overflow-x-auto snap-x snap-mandatory scroll-smooth pb-4 [-ms-overflow-style:none] [scrollbar-width:none]"
      aria-label={title}
    >
      <style is:inline>
        #cs-track::-webkit-scrollbar{display:none;}
      </style>

      {items.map((it) => (
        <div class="snap-center shrink-0 w-[90%] sm:w-[70%] md:w-[60%] lg:w-[700px]">
          <HorizontalCard {...it} />
        </div>
      ))}
    </div>

    <div class="mt-4 flex items-center justify-center gap-3">
      <button id="cs-prev" class="rounded-full border px-3 py-1 text-sm hover:bg-gray-50" aria-label="Previous">‹</button>
      <div id="cs-dots" class="flex gap-2"></div>
      <button id="cs-next" class="rounded-full border px-3 py-1 text-sm hover:bg-gray-50" aria-label="Next">›</button>
    </div>
  </div>
</section>

<script is:inline>
  const track = document.getElementById('cs-track');
  const slides = Array.from(track.children);
  const prev = document.getElementById('cs-prev');
  const next = document.getElementById('cs-next');
  const dotsWrap = document.getElementById('cs-dots');

  function idxFromScroll(){
    const left = track.getBoundingClientRect().left;
    let i=0, m=Infinity;
    slides.forEach((s, k) => {
      const d = Math.abs(s.getBoundingClientRect().left - left);
      if (d < m) { m = d; i = k; }
    });
    return i;
  }
  function go(i){
    const t = Math.max(0, Math.min(slides.length-1, i));
    slides[t].scrollIntoView({behavior:'smooth', inline:'center', block:'nearest'});
    sync(t);
  }
  function sync(active = idxFromScroll()){
    dotsWrap.querySelectorAll('button').forEach((b, i) =>
      b.setAttribute('aria-current', i === active)
    );
    prev.disabled = active === 0;
    next.disabled = active === slides.length-1;
  }

  slides.forEach((_, i) => {
    const b = document.createElement('button');
    // tweak colors to your brand if you like:
    // e.g., 'bg-gray-300 aria-[current=true]:bg-miloPurple'
    b.className = 'h-2 w-2 rounded-full bg-gray-300 aria-[current=true]:bg-black';
    b.setAttribute('aria-label', `Go to slide ${i+1}`);
    b.addEventListener('click', () => go(i));
    dotsWrap.appendChild(b);
  });

  prev.addEventListener('click', () => go(idxFromScroll()-1));
  next.addEventListener('click', () => go(idxFromScroll()+1));

  let raf; track.addEventListener('scroll', () => {
    cancelAnimationFrame(raf); raf = requestAnimationFrame(() => sync());
  }, { passive:true });

  sync(0);
</script>
