---
/**
 * Props:
 * - items: Array<{ author: string; role: string; body: string; }>
 * - title?: string
 */
const { items = [], title = "What People Say" } = Astro.props;
const id = "fb-" + Math.random().toString(36).slice(2);
---

<section class="mt-12">
  <h2 class="text-2xl md:text-3xl font-bold mb-6 text-center">{title}</h2>

  <div class="relative">
    <!-- Prev/Next -->
    <button
      type="button"
      class="hidden sm:flex absolute left-2 top-1/2 -translate-y-1/2 z-10 h-10 w-10 items-center justify-center rounded-full border border-gray-300 bg-white/90 backdrop-blur hover:bg-white"
      aria-label="Previous"
      data-prev={id}
    >
      ‹
    </button>
    <button
      type="button"
      class="hidden sm:flex absolute right-2 top-1/2 -translate-y-1/2 z-10 h-10 w-10 items-center justify-center rounded-full border border-gray-300 bg-white/90 backdrop-blur hover:bg-white"
      aria-label="Next"
      data-next={id}
    >
      ›
    </button>

    <!-- Scroll area -->
    <div
      id={id}
      class="scroll-smooth overflow-x-auto snap-x snap-mandatory no-scrollbar"
    >
      <ul class="flex gap-6 px-6 md:px-12">
        {items.map((t, i) => (
          <li
            class="snap-center shrink-0 w-[88%] sm:w-[70%] md:w-[56%] lg:w-[48%] xl:w-[42%] mx-auto"
            aria-roledescription="slide"
            aria-label={`Slide ${i + 1} of ${items.length}`}
          >
          <figure class="relative overflow-visible rounded-2xl border bg-white p-6 md:p-8
               shadow-sm hover:shadow-md transition-shadow">
                  <span
                    aria-hidden="true"
                    class="pointer-events-none select-none absolute -left-4 -top-4 md:-left-6 md:-top-6
                           text-miloYellow text-6xl md:text-7xl font-serif leading-none z-10">
                    “
                  </span>
                
                  <!-- add left padding so text doesn’t collide with the quote -->
                  <blockquote class="pl-8 md:pl-10 text-lg md:text-xl leading-relaxed text-gray-900">
                    {t.body}
                  </blockquote>
                
                  <figcaption class="mt-4 text-sm text-gray-600">
                    <span class="font-semibold text-gray-900">{t.author}</span>
                    <span class="text-gray-500"> · {t.role}</span>
                  </figcaption>
          </figure>
          </li>
        ))}
      </ul>
    </div>

    <!-- Dots -->
    <div class="mt-4 flex items-center justify-center gap-2" data-dots={id}>
      {items.map((_, i) => (
        <button
          type="button"
          class="h-2.5 w-2.5 rounded-full bg-gray-300 aria-[current=true]:bg-gray-800"
          aria-label={`Go to slide ${i + 1}`}
          aria-current={i === 0 ? "true" : "false"}
          data-index={i}
        />
      ))}
    </div>
  </div>
</section>

<style is:global>
  .no-scrollbar::-webkit-scrollbar { display: none; }
  .no-scrollbar { -ms-overflow-style: none; scrollbar-width: none; }
</style>

<script>
  const scroller = document.getElementById({id});
  if (scroller) {
    const prev = document.querySelector(`[data-prev="{id}"]`);
    const next = document.querySelector(`[data-next="{id}"]`);
    const dotsWrap = document.querySelector(`[data-dots="{id}"]`);
    const slides = Array.from(scroller.querySelectorAll('li'));
    const dots = Array.from(dotsWrap?.querySelectorAll('button') ?? []);

    const goTo = (idx) => {
      const el = slides[Math.max(0, Math.min(idx, slides.length - 1))];
      if (el) el.scrollIntoView({ behavior: 'smooth', inline: 'center' });
    };

    const updateDots = () => {
      // Find the slide most centered in view
      const scLeft = scroller.scrollLeft;
      const widths = slides.map(s => s.offsetLeft);
      let idx = 0;
      let min = Infinity;
      widths.forEach((x, i) => {
        const d = Math.abs(x - scLeft);
        if (d < min) { min = d; idx = i; }
      });
      dots.forEach((d, i) => d.setAttribute('aria-current', String(i === idx)));
    };

    prev?.addEventListener('click', () => {
      const current = dots.findIndex(d => d.getAttribute('aria-current') === 'true');
      goTo(current - 1);
    });
    next?.addEventListener('click', () => {
      const current = dots.findIndex(d => d.getAttribute('aria-current') === 'true');
      goTo(current + 1);
    });
    dots.forEach((d, i) => d.addEventListener('click', () => goTo(i)));
    scroller.addEventListener('scroll', () => { window.requestAnimationFrame(updateDots); });
    window.addEventListener('resize', updateDots);
    updateDots();
  }
</script>
