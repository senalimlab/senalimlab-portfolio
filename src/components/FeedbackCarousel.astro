---
// FeedbackCarousel.astro
// Props: items: Array<{ author: string; role: string; body: string }>, title?: string
import { feedback } from "../content/feedback.js";

const { items = [], title = "What People Say" } = Astro.props;
const id = "fb-" + Math.random().toString(36).slice(2);
---

<section class="relative mt-12 overflow-visible" data-carousel={id}>
  <!-- yellow line + dot accents you already have above/below -->

  <h2 class="heading-2 mb-6 text-center">{title}</h2>

  <div class="relative">
    <!-- viewport container is relative so arrows center correctly -->
    <div
      class="relative scroll-smooth overflow-x-auto snap-x snap-mandatory no-scrollbar"
      data-scroller
    >
      <ul class="flex gap-6 px-6 md:px-12 py-1">
        {items.map((t, i) => (
          <li class="snap-center shrink-0 w-[88%] sm:w-[70%] md:w-[56%] lg:w-[48%] xl:w-[42%] mx-auto">
            <figure class="relative rounded-2xl border border-gray-200 bg-white p-6 md:p-8
               shadow-sm hover:shadow-md transition-shadow">
                  <!-- Quote that moves with the card -->
                  <span
                    aria-hidden="true"
                    class="pointer-events-none select-none absolute left-2 top-1 md:left-3 md:top-0
                           text-miloYellow text-5xl md:text-6xl font-serif leading-none z-10">
                    “
                  </span>
                                
                  <!-- add left padding so text doesn’t collide with the quote -->
                  <blockquote class="italic pl-4 md:pl-6 body-text text-gray-900 leading-relaxed">
                    {t.body}
                  </blockquote>

                  <figcaption class="mt-4 body-text text-gray-600">
                    <span class="font-semibold text-gray-900">{t.author}</span>
                    <span class="text-gray-500"> · {t.role}</span>
                  </figcaption>
          </figure>
          </li>
        ))}
      </ul>
</section>

<style is:global>
  .no-scrollbar::-webkit-scrollbar { display: none; }
  .no-scrollbar { -ms-overflow-style: none; scrollbar-width: none; }
</style>

<script>
  (() => {
    const root = document.querySelector(`[data-carousel=${JSON.stringify(id)}]`);
    if (!root) return;

    const scroller = root.querySelector('[data-scroller]');
    const prevBtn  = root.querySelector('[data-prev]');
    const nextBtn  = root.querySelector('[data-next]');
    const dotsWrap = root.querySelector('[data-dots]');
    const slides   = Array.from(root.querySelectorAll('li'));
    const dots     = Array.from(dotsWrap?.querySelectorAll('button') ?? []);

    const goTo = (idx) => {
      const i = Math.max(0, Math.min(idx, slides.length - 1));
      slides[i]?.scrollIntoView({ behavior: 'smooth', inline: 'center', block: 'nearest' });
    };

    const currentIndex = () => {
      // Find the slide whose left edge is closest to scrollLeft
      const x = scroller.scrollLeft;
      let best = 0, min = Infinity;
      slides.forEach((s, i) => {
        const d = Math.abs(s.offsetLeft - x);
        if (d < min) { min = d; best = i; }
      });
      return best;
    };

    const updateDots = () => {
      const idx = currentIndex();
      dots.forEach((d, i) => d.setAttribute('aria-current', String(i === idx)));
    };

    prevBtn?.addEventListener('click', (e) => { e.preventDefault(); goTo(currentIndex() - 1); });
    nextBtn?.addEventListener('click', (e) => { e.preventDefault(); goTo(currentIndex() + 1); });
    dots.forEach((d, i) => d.addEventListener('click', (e) => { e.preventDefault(); goTo(i); }));

    scroller.addEventListener('scroll', () => requestAnimationFrame(updateDots));
    window.addEventListener('resize', updateDots);
    updateDots();
  })();
</script>
